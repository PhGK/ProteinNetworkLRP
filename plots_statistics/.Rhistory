library(ggplot2)
library(stringr)
library(magrittr)
library(tiyr)
library(dplyr)
library(DescTools)
library(gplots)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(igraph)
library(e1071)
library(VGAM)
library(abind)
library(graphlayouts)
library(ComplexHeatmap)
library(plyr)
library(stats)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
textsize = 30
axistext=30
RAWPATH = '../results/artificial/heterogeneous/raw_data/'
filenames <- list.files(RAWPATH)
LRP_data_raw <-rbindlist(lapply(filenames, function(filename) fread(paste0(RAWPATH, filename)))) %>%
dplyr::select(LRP, predicting_protein, masked_protein, sample_name)
LRP_data_raw$LRP = abs(LRP_data_raw$LRP)
LRP_data_d <- LRP_data_raw
colnames(LRP_data_d) <- c("dLRP", "predicting_protein", "masked_protein", "sample_name")
LRP_data_t <- LRP_data_raw %>% dplyr::select(predicting_protein, masked_protein, sample_name, LRP)
colnames(LRP_data_t) <- c("masked_protein", "predicting_protein", "sample_name", "tLRP")
LRP_data <- left_join(LRP_data_d, LRP_data_t, by = c("predicting_protein", "masked_protein", "sample_name")) %>% mutate("LRP" = 0.5*(dLRP+tLRP))
#specifiy number of samples per row
numberpresample = 15
sample_names <- LRP_data$sample_name %>%unique()
set.seed(0)
group1 <- sample(sample_names[sample_names < 1000], 15)
set.seed(1)
group2 <- sample(sample_names[sample_names >= 1000 & sample_names < 2000], 15)
set.seed(2)
group3 <- sample(sample_names[sample_names >= 2000 & sample_names < 3000], 15)
set.seed(3)
group4 <- sample(sample_names[sample_names >= 3000 & sample_names < 4000], 15)
#add group variable and select sample_names for display
LRP_data_sel  <- LRP_data %>%
dplyr::group_by(predicting_protein, masked_protein) %>%
mutate("sample_group" = sample_name %/%1000+1) %>%
filter(sample_name %in% c(group1,group2,group3,group4)) %>%
group_by(sample_group) %>%
dplyr::mutate('rank' = as.factor(as.numeric(as.factor(sample_name))))
# build log LRP for better visibility
log_LRP_sel <- LRP_data_sel %>% dplyr::select(predicting_protein, masked_protein, LRP, sample_name, sample_group, rank) %>%
group_by(sample_name) %>%
mutate("LRP" = LRP, "group_sample_name" = sample_name%%1000)
showsample_name <- log_LRP_sel%>% filter(rank ==1) %>%
mutate("LRP" = ifelse(predicting_protein <= sample_group*8 & predicting_protein >= sample_group*8-7 &
masked_protein <= sample_group*8 & masked_protein >= sample_group*8-7,max(log_LRP_sel$LRP)*0.9,0))
showsample_name$rank = as.factor(0)
log_LRP_sel_combined <- rbind(showsample_name, log_LRP_sel) %>% dplyr::arrange(predicting_protein, masked_protein)
single_sample_plot <- ggplot(log_LRP_sel_combined, aes(predicting_protein, y = masked_protein, fill = LRP)) +
ggtitle('I') +
geom_tile() +
scale_y_continuous(trans = "reverse") +
facet_grid(sample_group ~ rank) +
theme_bw() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank(),
strip.text.y = element_text(size=axistext),
axis.title = element_text(size=textsize, face = 'plain'),
#title = element_text(size = 30, hjust = -1),
plot.title = element_text(size = 35, hjust = -0.02, face='plain'),
legend.title = element_text(size=textsize),
legend.text = element_text(size = axistext),
axis.text = element_text(size=axistext)
) +
xlab('Source protein') +
ylab('Target protein') +
#scale_fill_distiller(palette = "RdGy", direction = -1)+
scale_fill_distiller(palette = "Spectral")+
scale_x_continuous(breaks=c(1,20))
png('./figures/heatmaps.png', width = 3000, height = 1000)
single_sample_plot
dev.off()
#########################################################################################################
#boxplots
grouped_LRP_data <- LRP_data %>% mutate("sample_group" = as.numeric(sample_name) %/%1000+1, "pp_group" = as.numeric(predicting_protein) %/%8+1, "mp_group" = as.numeric(masked_protein) %/%8+1)
aggregated_LRP_data <- grouped_LRP_data %>% group_by(sample_name, pp_group, mp_group, sample_group) %>%
dplyr::summarize(meanLRP = (mean(LRP))) %>% mutate("grsample_name_" = 10*pp_group + mp_group)
aggregated_LRP_data$pp_group <- as.factor(aggregated_LRP_data$pp_group)
aggregated_LRP_data$mp_group <- as.factor(aggregated_LRP_data$mp_group)
levels(aggregated_LRP_data$pp_group) <- c("Pr 1-8", "Pr 9-16","Pr 17-24","Pr 25-32")
levels(aggregated_LRP_data$mp_group) <-c("Proteins 1-8", "Proteins 9-16","Proteins 17-24","Proteins 25-32")
boxplot <- ggplot(aggregated_LRP_data, aes(x =sample_group, y=(100*meanLRP), group = sample_group)) +
geom_boxplot(outlier.shape=NA) +
facet_grid(pp_group ~ mp_group)+
ggtitle('J') +
xlab("Interaction group")+
ylab("LRP")+
coord_trans(y = 'log2')+
scale_y_continuous(breaks = c(0.0,0.1, 1.0, 10)) +
theme_bw() +
theme(
axis.title = element_text(size=textsize),
axis.text = element_text(size=axistext),
#title = element_text(size = 30),
plot.title = element_text(size = 35, hjust = -0.04, face='plain'),
strip.background = element_blank(),
strip.text.x = element_text(size= 0.9*axistext),
strip.text.y = element_text(size= 0.9* axistext)
)
png(paste('./figures/art_box_plot.png'), width = 1000, height = 800)
boxplot
dev.off()
############
library(Rtsne)
LRP_data_wide <- LRP_data %>% mutate("grid_" = 100*as.numeric(predicting_protein) + 1*as.numeric(masked_protein),"sample_group" = as.numeric(sample_name) %/%1000+1) %>%
dplyr::select(grid_, LRP, sample_name, sample_group) %>%
pivot_wider(names_from ="grid_", values_from=LRP)
normalize <- function(x) {
x <- as.numeric(x)
(x-mean(x))/sd(x)
}
LRP_data_matrix <- log(LRP_data_wide+1)
#LRP_data_matrix <- apply(LRP_data_wide[,-c(1,2)],1,normalize)
tsne<- Rtsne(as.matrix(LRP_data_matrix), check_duplicates = F, perplexity = 30)
tsne_plot <- data.frame(x = tsne$Y[,1], y = tsne$Y[,2], sample_group = LRP_data_wide$sample_group)
art_tsne <- ggplot(tsne_plot, aes(x=x, y=y, color = as.factor(sample_group))) + geom_point() +
ggtitle('K') +
labs(color = "Interaction group") +
theme_bw()+
theme(
axis.title = element_text(size=textsize),
#title = element_text(size = 30, hjust = -0.01),
plot.title = element_text(size = 35, hjust = -0.04, face='plain'),
legend.title = element_text(size=textsize),
legend.text = element_text(size=textsize),
axis.text = element_text(size=axistext)
) +
guides(colour = guide_legend(override.aes = list(size=2.5)))
png(paste('./figures/art_tsne.png'), width = 1000, height = 800)
art_tsne
dev.off()
########################################################
#combine plots
png('./figures/Figure_2.png', height = 1000, width = 1400)
library(gridExtra)
lay <- rbind(c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
#c(4,4,4,4,4,4),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3))
grid.arrange(single_sample_plot, boxplot,art_tsne, layout_matrix = lay)
dev.off()
#########################################################
#ROC analysis
library(pROC)
LRP_data_struc <- LRP_data %>% dplyr::mutate("sample_group" = as.numeric(sample_name)%/%1000+1) %>%
dplyr::mutate("ground_truth" = ifelse(predicting_protein <= sample_group*8 & predicting_protein >= sample_group*8-7 &
masked_protein <= sample_group*8 & masked_protein >= sample_group*8-7,1,0)) %>%
filter(!(predicting_protein == masked_protein))
rocplot <- roc(LRP_data_struc$ground_truth, LRP_data_struc$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
library(pROC)
png('./figures/single_roc_plot.png', width = 1200, height = 1200)
plot.roc(rocplot, ci=TRUE,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=4, print.auc.x=0.7)
dev.off()
spec <- LRP_data_struc %>%
filter((predicting_protein%/%8 == masked_protein %/% 8))
rocplot <- roc(spec$ground_truth, spec$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
library(gridExtra)
########################################################
#combine plots
png('./figures/Figure_2.png', height = 1000, width = 1400)
library(gridExtra)
lay <- rbind(c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
#c(4,4,4,4,4,4),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3))
grid.arrange(single_sample_plot, boxplot,art_tsne, layout_matrix = lay)
dev.off()
#########################################################
#ROC analysis
library(pROC)
LRP_data_struc <- LRP_data %>% dplyr::mutate("sample_group" = as.numeric(sample_name)%/%1000+1) %>%
dplyr::mutate("ground_truth" = ifelse(predicting_protein <= sample_group*8 & predicting_protein >= sample_group*8-7 &
masked_protein <= sample_group*8 & masked_protein >= sample_group*8-7,1,0)) %>%
filter(!(predicting_protein == masked_protein))
rocplot <- roc(LRP_data_struc$ground_truth, LRP_data_struc$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
library(pROC)
png('./figures/single_roc_plot.png', width = 1200, height = 1200)
plot.roc(rocplot, ci=TRUE,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=4, print.auc.x=0.7)
dev.off()
spec <- LRP_data_struc %>%
filter((predicting_protein%/%8 == masked_protein %/% 8))
rocplot <- roc(spec$ground_truth, spec$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
library(gridExtra)
############################################################################
part1 <- readRDS('./figures/part1.rds')
pdf('./figures/Figure_1_2.pdf', height = 2000, width = 2000)
lay <- rbind(c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
#c(4,4,4,4,4,4),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3))
grid.arrange(single_sample_plot, boxplot,art_tsne, part1, layout_matrix = lay)
dev.off()
roc(LRP_data_struc$ground_truth, LRP_data_struc$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
roc(spec$ground_truth, spec$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
lay <- rbind(c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
#c(4,4,4,4,4,4),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3))
grid.arrange(single_sample_plot, boxplot,art_tsne, part1, layout_matrix = lay)
dev.off()
roc(LRP_data_struc$ground_truth, LRP_data_struc$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
roc(spec$ground_truth, spec$LRP,  ci=TRUE, plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grsample_name=TRUE, print.auc=TRUE)
data_now <- LRP_data %>% mutate("sample_group" = as.numeric(sample_name) %/%500+1, "pp_group" = as.numeric(predicting_protein) %/%8+1, "mp_group" = as.numeric(masked_protein) %/%8+1)
lay <- rbind(c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(4,4,4,4,4,4,4),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
c(1,1,1,1,1,1,1),
#c(4,4,4,4,4,4),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3),
c(2,2,2,3,3,3,3))
grid.arrange(single_sample_plot, boxplot,art_tsne, part1, layout_matrix = lay)
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(DescTools)
library(gplots)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(igraph)
library(e1071)
library(VGAM)
library(abind)
library(graphlayouts)
library(plyr)
############
####plots
############
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
test_data <- fread('../results/LRP/use_data/all_data.csv')
test_data$LRP <- test_data$LRP %>% abs()
##############################################################################################################################
#load ground truth data
# --> choose only cases with high correlation
##############################################################################################################################
#load ground truth data
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
dplyr::select(-Cancer_Type)
for_correlation <- test_data %>% dplyr::select(ID, y, y_pred) %>%
unique() %>%
group_by(ID)
correlation <- ddply(for_correlation, "ID", summarize, "corr" = cor(y, y_pred))
highcorrelation <- correlation %>% filter(corr>0.01)
rcorr(for_correlation$y, for_correlation$y_pred)
case_numbers_old <- test_data %>% group_by(ID) %>% dplyr::summarize("Cancer_Type" = max(Cancer_Type))
summary(as.factor(case_numbers_old$Cancer_Type))
LRP_data_filtered <- test_data %>% filter(ID %in% highcorrelation$ID)
########################################
LRP_sym_dir <- LRP_data_filtered %>% dplyr::select(LRP, predicting_protein, masked_protein, ID)
LRP_sym_trans <- LRP_sym_dir
colnames(LRP_sym_trans) <- c('tLRP', 'masked_protein', 'predicting_protein', 'ID')
LRP_sym <- left_join(LRP_sym_dir, LRP_sym_trans) %>%
dplyr::mutate("LRP" = 0.5*(LRP + tLRP))  %>%
filter(predicting_protein > masked_protein)
mean_LRP_sym <- LRP_sym %>%
dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize('LRP' = median(LRP))
##################################################
# read ractome matrix
adj_react <- read.delim('../data/int_react_147_060418.csv', header = F)
colnames(adj_react) <- c("masked_protein", as.character(adj_react$V1))
adj_react_matrix <- as.matrix(adj_react[,-1])
rownames(adj_react_matrix) <- as.character(adj_react$masked_protein)
# order names alphanumerically
adj_react_matrix_ordered <- adj_react_matrix[str_order(rownames(adj_react_matrix)), str_order(colnames(adj_react_matrix))]
adj_react_long <- pivot_longer(adj_react,cols=!masked_protein, names_to = "predicting_protein", values_to = "edge")
adj_react_long$predicting_protein <- as.character(adj_react_long$predicting_protein)
adj_react_long$masked_protein <- as.character(adj_react_long$masked_protein)
adj_react_long_sym <- adj_react_long %>% filter((predicting_protein) > (masked_protein))
###################################################
full_frame <- left_join(adj_react_long_sym, mean_LRP_sym, by =c("masked_protein", "predicting_protein"))
#######################################
#prepare correlation matrix
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
filter(proteins %in% (adj_react_long$predicting_protein %>% unique() %>% unlist())) %>%
filter(ID %in% (LRP_data_filtered$case %>% unique %>% unlist())) %>%
pivot_wider(names_from =proteins, values_from=expression)
for_correlation <- protein_data[,-c(1:2)]
for_correlation_ordered <- for_correlation[,str_order(colnames(for_correlation))]
corr_matrix <- cor(for_correlation_ordered) %>% as.matrix() %>% abs()
corr_data_long <- as.data.frame(corr_matrix) %>% cbind("predicting_protein" = colnames(corr_matrix), .)%>%
pivot_longer(!predicting_protein, names_to = "masked_protein", values_to = "correlation") %>%
filter(as.character(predicting_protein) > as.character(masked_protein))
full_frame_LRP_corr <- left_join(full_frame, corr_data_long)
full_frame_all <- left_join(full_frame_LRP_corr)#, genie_data_long)
k = 100
full_frame_all <- left_join(full_frame_LRP_corr)#, genie_data_long)
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(correlation)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
full_frame_all <- left_join(full_frame_LRP_corr)#, genie_data_long)
full_frame_all <- full_frame_LRP_corr # left_join(full_frame_LRP_corr, genie_data_long)
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(correlation)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame_subset$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrectall
nfalseall
ncorrectall+nfalseall
ncorrect
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(LRP)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame_subset$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrectall
nfalseall
ncorrectall+nfalseall
ncorrect
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(correlation)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame_subset$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrectall
nfalseall
ncorrectall+nfalseall
ncorrect
View(full_frame_all)
#######################################
#prepare correlation matrix
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
filter(proteins %in% (adj_react_long$predicting_protein %>% unique() %>% unlist())) %>%
filter(ID %in% (LRP_data_filtered$case %>% unique %>% unlist())) %>%
pivot_wider(names_from =proteins, values_from=expression)
for_correlation <- protein_data[,-c(1:2)]
for_correlation_ordered <- for_correlation[,str_order(colnames(for_correlation))]
corr_matrix <- cor(for_correlation_ordered) %>% as.matrix() %>% abs()
corr_data_long <- as.data.frame(corr_matrix) %>% cbind("predicting_protein" = colnames(corr_matrix), .)%>%
pivot_longer(!predicting_protein, names_to = "masked_protein", values_to = "correlation") %>%
filter(as.character(predicting_protein) > as.character(masked_protein))
full_frame_LRP_corr <- left_join(full_frame, corr_data_long)
View(full_frame_LRP_corr)
#######################################
#prepare correlation matrix
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
filter(proteins %in% (adj_react_long$predicting_protein %>% unique() %>% unlist())) %>%
filter(ID %in% (LRP_data_filtered$case %>% unique %>% unlist())) %>%
pivot_wider(names_from =proteins, values_from=expression)
#######################################
#prepare correlation matrix
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") #%>%
#######################################
#prepare correlation matrix
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
filter(proteins %in% (adj_react_long$predicting_protein %>% unique() %>% unlist())) #%>%
#######################################
#prepare correlation matrix
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
filter(proteins %in% (adj_react_long$predicting_protein %>% unique() %>% unlist())) %>%
filter(ID %in% (LRP_data_filtered$ID %>% unique %>% unlist())) %>%
pivot_wider(names_from =proteins, values_from=expression)
for_correlation <- protein_data[,-c(1:2)]
for_correlation_ordered <- for_correlation[,str_order(colnames(for_correlation))]
corr_matrix <- cor(for_correlation_ordered) %>% as.matrix() %>% abs()
corr_data_long <- as.data.frame(corr_matrix) %>% cbind("predicting_protein" = colnames(corr_matrix), .)%>%
pivot_longer(!predicting_protein, names_to = "masked_protein", values_to = "correlation") %>%
filter(as.character(predicting_protein) > as.character(masked_protein))
full_frame_LRP_corr <- left_join(full_frame, corr_data_long)
#########
#prepare GENIE matrix
library(GENIE3)
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
filter(proteins %in% (adj_react_long$predicting_protein %>% unique() %>% unlist())) %>%
filter(ID %in% (LRP_data_filtered$case %>% unique %>% unlist())) %>%
pivot_wider(names_from =proteins, values_from=expression)
#########
#prepare GENIE matrix
library(GENIE3)
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names=F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
filter(proteins %in% (adj_react_long$predicting_protein %>% unique() %>% unlist())) %>%
filter(ID %in% (LRP_data_filtered$ID %>% unique %>% unlist())) %>%
pivot_wider(names_from =proteins, values_from=expression)
for_correlation <- protein_data[,-c(1:2)]
for_correlation_ordered <- for_correlation[,str_order(colnames(for_correlation))] %>% t()
genie_matrix <- GENIE3(for_correlation_ordered, verbose=T)
?GENIE3
genie_matrix <- GENIE3(for_correlation_ordered, verbose=T, nCores=1)
genie_matrix <- GENIE3(for_correlation_ordered, verbose=T, nCores=10)
genie_matrix_sym <- genie_matrix + t(genie_matrix)
genie_data_long <- as.data.frame(genie_matrix_sym) %>% cbind("predicting_protein" = colnames(genie_matrix_sym), .)%>%
pivot_longer(!predicting_protein, names_to = "masked_protein", values_to = "genie3") %>%
filter(as.character(predicting_protein) > as.character(masked_protein))
k = 100
full_frame_all <- left_join(full_frame_LRP_corr, genie_data_long)
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(correlation)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame_subset$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrectall
nfalseall
ncorrectall+nfalseall
ncorrect
k = 100
full_frame_all <- left_join(full_frame_LRP_corr, genie_data_long)
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(correlation)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame_subset$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrectall
nfalseall
ncorrectall+nfalseall
ncorrect
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(genie3)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame_subset$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrectall
nfalseall
ncorrectall+nfalseall
ncorrect
full_frame_subset <- full_frame_all %>% dplyr::arrange(desc(LRP)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame_subset$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrectall
nfalseall
ncorrectall+nfalseall
ncorrect
