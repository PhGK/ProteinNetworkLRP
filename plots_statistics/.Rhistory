dplyr::select(predicting_protein, masked_protein, LRP ) %>%
pivot_wider(names_from = "masked_protein", values_from = "LRP")
IDmatrix <- IDframe[,-1] %>% as.matrix()
rownames(IDmatrix) <- IDframe$predicting_protein
IDmatrix_ordered <- IDmatrix[str_order(rownames(IDmatrix)), str_order(colnames(IDmatrix))]
cutoff_ID <- IDmatrix_ordered %>% abs() %>% quantile(0.999)
IDmatrix_ordered_select <- ifelse(abs(IDmatrix_ordered) >= cutoff_ID, IDmatrix_ordered,0)
IDgraph <- graph_from_adjacency_matrix(IDmatrix_ordered_select, mode = "directed", weighted=T)
E(IDgraph)[E(IDgraph)$weight>0]$color <- "red"
E(IDgraph)[E(IDgraph)$weight<0]$color <- "blue"
current_positions <- data.frame(x = mean_positions[,1] + 10+current_network_position$x, y = mean_positions[,2] + 10+current_network_position$y) %>% as.matrix()
png(paste('./figures/temp/', current_ID, '.png', sep=""), width=500, height = 500)
par(bg=NA)
par(oma = c(0,0,0,0), mar=c(0,0,0,0))
plot(IDgraph,  layout = mean_positions, vertex.label=NA, vertex.size = 0.01, vertex.color = NA, edge.width = 4.0, vertex.label.dist=1,
vertex.label.cex = 0.7, edge.arrow.width=0.1, edge.arrow.size=0.1, rescale = T)
dev.off()
}
#########################
library(png)
scale_it <- function(x,low,high) {
x_scaled <- x/(max(x)-min(x))*(high-low)
x_end <- x_scaled-min(x_scaled)+low
}
image_size = 0.14 # 0.15
current_position_normalized <- current_cluster_position %>% mutate("x" = scale_it(x,0.5*image_size,1-0.5*image_size), "y" = scale_it(y,0.5*image_size,1-0.5*image_size))
png(paste('./figures/temp/','cluster_',current_cluster ,'.png', sep=""), width = 2000, height = 2000, res=200)
par(oma = c(0,0,0,0), mar=c(0,0,0,0)) #delete this?! was added 3.5.2021
plot.new()
for (current_ID in current_cluster_position$ID) {
print(current_ID)
current_image <- readPNG(paste('./figures/temp/', current_ID, '.png', sep=""))
#current_image[1:500, c(1:2,499:500),] <- 0
#current_image[c(1:2,499:500), 1:500, ] <- 0
current_network_position <- current_position_normalized %>% filter(ID==current_ID)
x = current_network_position$x
y = current_network_position$y
rasterImage(current_image, x-0.5*image_size,y-0.5*image_size,x+0.5*image_size,y+0.5*image_size)
}
text(x=0.0, y=0.95, label=as.character(current_cluster), cex=5)
dev.off()
}
#########################
library(png)
scale_it <- function(x,low,high) {
x_scaled <- x/(max(x)-min(x))*(high-low)
x_end <- x_scaled-min(x_scaled)+low
}
image_size = 0.14 # 0.15
current_position_normalized <- current_cluster_position %>% mutate("x" = scale_it(x,0.5*image_size,1-0.5*image_size), "y" = scale_it(y,0.5*image_size,1-0.5*image_size))
png(paste('./figures/temp/','cluster_',current_cluster ,'.png', sep=""), width = 2000, height = 2000, res=200)
par(oma = c(0,0,0,0), mar=c(0,0,0,0)) #delete this?! was added 3.5.2021
plot.new()
for (current_ID in current_cluster_position$ID) {
print(current_ID)
current_image <- readPNG(paste('./figures/temp/', current_ID, '.png', sep=""))
#current_image[1:500, c(1:2,499:500),] <- 0
#current_image[c(1:2,499:500), 1:500, ] <- 0
current_network_position <- current_position_normalized %>% filter(ID==current_ID)
x = current_network_position$x
y = current_network_position$y
rasterImage(current_image, x-0.5*image_size,y-0.5*image_size,x+0.5*image_size,y+0.5*image_size)
}
text(x=0.0, y=0.95, label=as.character(current_cluster), cex=5)
dev.off()
for (current_cluster in seq(nclusters)){
current_cluster_position <- cluster_data %>% filter(dbclusters==current_cluster) #CAVE: cluster_data is not yet spaced, only applies to t-SNE
current_cluster_data <- test_data %>% filter(ID %in% current_cluster_position$ID)
####
#symmetrize current cluster data for average network
current_cluster_data_dir <- current_cluster_data %>% dplyr::select(predicting_protein, masked_protein, LRP, ID)
current_cluster_data_trans <- current_cluster_data_dir
colnames(current_cluster_data_trans)[1] <- "masked_protein"
colnames(current_cluster_data_trans)[2] <- "predicting_protein"
colnames(current_cluster_data_trans)[3] <- "tLRP"
current_cluster_data_sym <- left_join(current_cluster_data_dir, current_cluster_data_trans) %>%
mutate("LRP_sym" = 0.5*(abs(LRP)+abs(tLRP)))#%>%
#  dplyr::filter(predicting_protein>masked_protein)
####
average_frame <- current_cluster_data_sym %>% group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP"= median(LRP_sym)) %>%
pivot_wider(names_from = masked_protein, values_from = meanLRP)
average_matrix <- average_frame[,-1] %>% as.matrix()
rownames(average_matrix) <- average_frame$predicting_protein
average_matrix_ordered <- average_matrix[str_order(rownames(average_matrix)), str_order(colnames(average_matrix))]
cutoff_param <- cutofffunction(current_cluster)
#cutoff_ID <- average_matrix_ordered %>% abs() %>% quantile(cutoff_param)
####
forthresh <- current_cluster_data_sym %>% group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP"= median(LRP_sym)) %>%
arrange(desc(meanLRP))
for (thresh in forthresh$meanLRP) {
high_edges <- forthresh %>% filter(meanLRP>=thresh)
if (c(high_edges$predicting_protein, high_edges$masked_protein) %>% unique() %>% length() >=7) {
cutoff_ID <- thresh
break
}
}
####
average_matrix_ordered_select <- ifelse(abs(average_matrix_ordered) >= cutoff_ID, average_matrix_ordered,0)
average_network <- graph_from_adjacency_matrix(average_matrix_ordered_select, weighted=T, mode="directed")
positions <- cbind(V(average_network),mean_positions)
#reduced_positions <- positions[degree(average_network) >0,]
vertices2delete <- positions[degree(average_network) ==0,1] %>% as.vector()
average_network2 <- delete_vertices(average_network, vertices2delete)
E(average_network2)[E(average_network2)$weight>0]$color <- "black"
thresh <- degree(average_network2) %>% sort(decreasing = T) %>% .[10] %>% max(c(.,1), na.rm=T)
selected_names <- V(average_network2)$name[rev(order(degree(average_network2)))] %>% .[1:min(20, length(.))]
set.seed(seedfunction(current_cluster))
l = layout_in_circle(average_network2, sample(seq(length(V(average_network2)))))
png(paste('./figures/temp/average_ID_', current_cluster, '.png', sep=""), width=2000, height = 1700, res=200)
#par(mar=c(4,11,5,8))
par(mar=c(0,11,0,8))
#qgraph(as_edgelist(average_network2),edge.labels=T)
#plot(average_network,  layout = mean_positions, vertex.label= ifelse(degree(average_network)>=thresh,V(average_network)$name, NA), vertex.size = 0.01, vertex.color = NA,
#     edge.width = 4.0, vertex.label.dist=1.0,
#     vertex.label.cex = 4.5, edge.arrow.width=0.1, edge.arrow.size=0.1, rescale = T)
plot(average_network2, layout = l, edge.width = 3.0, vertex.color = "white", vertex.size = 0, vertex.label.cex = 2.0, edge.arrow.size=0,
vertex.label= ifelse(V(average_network2)$name %in% selected_names,V(average_network2)$name, NA), vertex.label.family = "Helvetica")
text(x=-1.7, y=1.2, label=as.character(current_cluster), cex=5) #x=-1.3, y=1.2, cex=5
dev.off()
for (current_ID in current_cluster_position$ID) {
print(current_ID)
current_network_position <- current_cluster_position %>% filter(ID==current_ID)
current_network <- current_cluster_data %>% filter(ID==current_ID)
IDframe <- current_network %>%
dplyr::select(predicting_protein, masked_protein, LRP ) %>%
pivot_wider(names_from = "masked_protein", values_from = "LRP")
IDmatrix <- IDframe[,-1] %>% as.matrix()
rownames(IDmatrix) <- IDframe$predicting_protein
IDmatrix_ordered <- IDmatrix[str_order(rownames(IDmatrix)), str_order(colnames(IDmatrix))]
cutoff_ID <- IDmatrix_ordered %>% abs() %>% quantile(0.999)
IDmatrix_ordered_select <- ifelse(abs(IDmatrix_ordered) >= cutoff_ID, IDmatrix_ordered,0)
IDgraph <- graph_from_adjacency_matrix(IDmatrix_ordered_select, mode = "directed", weighted=T)
E(IDgraph)[E(IDgraph)$weight>0]$color <- "red"
E(IDgraph)[E(IDgraph)$weight<0]$color <- "blue"
current_positions <- data.frame(x = mean_positions[,1] + 10+current_network_position$x, y = mean_positions[,2] + 10+current_network_position$y) %>% as.matrix()
png(paste('./figures/temp/', current_ID, '.png', sep=""), width=500, height = 500)
par(bg=NA)
par(oma = c(0,0,0,0), mar=c(0,0,0,0))
plot(IDgraph,  layout = mean_positions, vertex.label=NA, vertex.size = 0.01, vertex.color = NA, edge.width = 4.0, vertex.label.dist=1,
vertex.label.cex = 0.7, edge.arrow.width=0.1, edge.arrow.size=0.1, rescale = T)
dev.off()
}
#########################
library(png)
scale_it <- function(x,low,high) {
x_scaled <- x/(max(x)-min(x))*(high-low)
x_end <- x_scaled-min(x_scaled)+low
}
image_size = 0.14 # 0.15
current_position_normalized <- current_cluster_position %>% mutate("x" = scale_it(x,0.5*image_size,1-0.5*image_size), "y" = scale_it(y,0.5*image_size,1-0.5*image_size))
png(paste('./figures/temp/','cluster_',current_cluster ,'.png', sep=""), width = 2000, height = 2000, res=200)
par(oma = c(0,0,0,0), mar=c(0,0,0,0)) #delete this?! was added 3.5.2021
plot.new()
for (current_ID in current_cluster_position$ID) {
print(current_ID)
current_image <- readPNG(paste('./figures/temp/', current_ID, '.png', sep=""))
#current_image[1:500, c(1:2,499:500),] <- 0
#current_image[c(1:2,499:500), 1:500, ] <- 0
current_network_position <- current_position_normalized %>% filter(ID==current_ID)
x = current_network_position$x
y = current_network_position$y
rasterImage(current_image, x-0.5*image_size,y-0.5*image_size,x+0.5*image_size,y+0.5*image_size)
}
text(x=0.0, y=0.95, label=as.character(current_cluster), cex=5)
dev.off()
}
###############################
#########################################################
#test interactions between c-MET caspase8 parpcleaved Snail ercc1
library(ggExtra)
selprots <- c("CMET", "CASPASE8", "PARPCLEAVED", "SNAIL", "ERCC1")
quintum <-test_data %>% ungroup()%>%
dplyr::filter(predicting_protein %in% selprots, masked_protein %in% selprots, predicting_protein!=masked_protein) %>%
dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, LRP)
t_quintum <- quintum
colnames(t_quintum) <- c("ID", "Cancer_Type", "masked_protein", "predicting_protein", "tLRP")
symmetric_quintum <- left_join(quintum, t_quintum) %>% mutate("new_LRP" = 0.5*(abs(LRP)+abs(tLRP))) %>% filter(predicting_protein < masked_protein)
library('scales')
marginplots <- function(selCancer_Type) {
quintum_raw <-  symmetric_quintum %>%
dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, new_LRP) %>%
unite("interaction",predicting_protein:masked_protein) %>% mutate(logLRP = log(1+new_LRP)) %>% filter(Cancer_Type==selCancer_Type)
p <- ggplot(quintum_raw, aes(x= as.numeric(as.factor(interaction)), y =logLRP)) +
geom_point(alpha = 0.0) +
geom_line(aes(color = ID, group = ID), show.legend = F) +
ggtitle(selCancer_Type) +
#ylim(0,6)+
xlab('Interactions')+
theme_bw()+
scale_x_continuous(breaks = pretty_breaks())
theme(plot.title = element_text(size=15, margin = margin(10,0, 0,0)),
axis.title.x = element_blank(),
plot.margin = margin(0,0,0,0))
p2 <- ggMarginal(p, type="histogram", margins = "y")
p2
}
#################################
Cancer_Types <- symmetric_quintum$Cancer_Type %>% unique()%>% unlist()
marplots <- lapply(Cancer_Types, marginplots)
library(ggpubr)
png("./figures/quintum.png",width = 1000, height = 1000)
ggarrange(plotlist=marplots)
dev.off()
##correlation
quintum_raw <-  symmetric_quintum %>%
unite("interaction",predicting_protein:masked_protein) %>%
dplyr::select(ID, interaction, new_LRP) %>%
#mutate("interaction" = as.factor(interaction)) %>%
pivot_wider(names_from=interaction, values_from = new_LRP)
correlation <- cor(quintum_raw[,-1], method = "pearson")
min(correlation)
max(correlation)
sort(correlation %>% unique())
marginplots <- function(selCancer_Type) {
quintum_raw <-  symmetric_quintum %>%
dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, new_LRP) %>%
unite("interaction",predicting_protein:masked_protein) %>% mutate(logLRP = log(1+new_LRP)) %>% filter(Cancer_Type==selCancer_Type)
p <- ggplot(quintum_raw, aes(x= as.numeric(as.factor(interaction)), y =logLRP)) +
geom_point(alpha = 0.0) +
geom_line(aes(color = ID, group = ID), show.legend = F) +
ggtitle(selCancer_Type) +
ylim(0,0.6)+
xlab('Interactions')+
theme_bw()+
scale_x_continuous(breaks = pretty_breaks())
theme(plot.title = element_text(size=15, margin = margin(10,0, 0,0)),
axis.title.x = element_blank(),
plot.margin = margin(0,0,0,0))
p2 <- ggMarginal(p, type="histogram", margins = "y")
p2
}
#################################
Cancer_Types <- symmetric_quintum$Cancer_Type %>% unique()%>% unlist()
marplots <- lapply(Cancer_Types, marginplots)
library(ggpubr)
png("./figures/quintum.png",width = 1000, height = 1000)
ggarrange(plotlist=marplots)
dev.off()
library('scales')
marginplots <- function(selCancer_Type) {
quintum_raw <-  symmetric_quintum %>%
dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, new_LRP) %>%
unite("interaction",predicting_protein:masked_protein) %>% mutate(logLRP = log(1+new_LRP)) %>% filter(Cancer_Type==selCancer_Type)
p <- ggplot(quintum_raw, aes(x= as.numeric(as.factor(interaction)), y =logLRP)) +
geom_point(alpha = 0.0) +
geom_line(aes(color = ID, group = ID), show.legend = F) +
ggtitle(selCancer_Type) +
ylim(0,0.7)+
xlab('Interactions')+
theme_bw()+
scale_x_continuous(breaks = pretty_breaks())
theme(plot.title = element_text(size=15, margin = margin(10,0, 0,0)),
axis.title.x = element_blank(),
plot.margin = margin(0,0,0,0))
p2 <- ggMarginal(p, type="histogram", margins = "y")
p2
}
#################################
Cancer_Types <- symmetric_quintum$Cancer_Type %>% unique()%>% unlist()
marplots <- lapply(Cancer_Types, marginplots)
library(ggpubr)
png("./figures/quintum.png",width = 1000, height = 1000)
ggarrange(plotlist=marplots)
dev.off()
##correlation
quintum_raw <-  symmetric_quintum %>%
unite("interaction",predicting_protein:masked_protein) %>%
dplyr::select(ID, interaction, new_LRP) %>%
#mutate("interaction" = as.factor(interaction)) %>%
pivot_wider(names_from=interaction, values_from = new_LRP)
correlation <- cor(quintum_raw[,-1], method = "pearson")
min(correlation)
max(correlation)
sort(correlation %>% unique())
correlation
sort(correlation %>% unique())
correlation <- cor(quintum_raw[,-1], method = "pearson")
correlation
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(DescTools)
library(gplots)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(igraph)
library(e1071)
library(VGAM)
library(abind)
library(graphlayouts)
library(ComplexHeatmap)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
####################################
#test_data for correlation
protein_data_dep <- fread('../data/artificial_homogeneous.csv')[-1,-1]
colnames(protein_data_dep) <- as.character(seq(32))
correlation_matrix <- cor(protein_data_dep)
Heatmap(correlation_matrix, cluster_rows = F, cluster_columns = F)
correlation_frame_dep <- correlation_matrix %>% as.data.frame() %>%
cbind("predicting_protein" = as.numeric(rownames(correlation_matrix),.)) %>%
pivot_longer(!predicting_protein, names_to = "masked_protein", values_to = "correlation") %>%
mutate("masked_protein" = str_extract(masked_protein, "[^X](.*)")) %>%
mutate("absCORR" = abs(correlation), "corr" = "correlated")
correlation_frame <- correlation_frame_dep
correlation_frame$predicting_protein <- as.numeric(correlation_frame$predicting_protein)
correlation_frame$masked_protein <- as.numeric(correlation_frame$masked_protein)
############################
#test_data for GENIE3
library(GENIE3)
genie_data <- protein_data_dep %>% as.matrix() %>% t()
colnames(genie_data) <- as.numeric(as.character(colnames(genie_data)))
rownames(genie_data) <- as.numeric(as.character(rownames(genie_data)))
genie_result <- GENIE3(genie_data, verbose=T, nCores=7)
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(DescTools)
library(gplots)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(igraph)
library(e1071)
library(VGAM)
library(abind)
library(graphlayouts)
library(ComplexHeatmap)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
####################################
#test_data for correlation
protein_data_dep <- fread('../data/artificial_homogeneous.csv')[-1,-1]
colnames(protein_data_dep) <- as.character(seq(32))
correlation_matrix <- cor(protein_data_dep)
Heatmap(correlation_matrix, cluster_rows = F, cluster_columns = F)
correlation_frame_dep <- correlation_matrix %>% as.data.frame() %>%
cbind("predicting_protein" = as.numeric(rownames(correlation_matrix),.)) %>%
pivot_longer(!predicting_protein, names_to = "masked_protein", values_to = "correlation") %>%
mutate("masked_protein" = str_extract(masked_protein, "[^X](.*)")) %>%
mutate("absCORR" = abs(correlation), "corr" = "correlated")
correlation_frame <- correlation_frame_dep
correlation_frame$predicting_protein <- as.numeric(correlation_frame$predicting_protein)
correlation_frame$masked_protein <- as.numeric(correlation_frame$masked_protein)
############################
#test_data for GENIE3
library(GENIE3)
genie_data <- protein_data_dep %>% as.matrix() %>% t()
colnames(genie_data) <- as.numeric(as.character(colnames(genie_data)))
rownames(genie_data) <- as.numeric(as.character(rownames(genie_data)))
genie_result <- GENIE3(genie_data, verbose=T, nCores=7)
genie_result <- genie_result[order(as.numeric(rownames(genie_result))), order(as.numeric(colnames(genie_result)))]
genie_result_sym <- (genie_result + t(genie_result))
Heatmap(genie_result_sym, cluster_rows = F, cluster_columns = F)
GENIE_frame <- genie_result_sym %>% as.data.frame() %>%
cbind("predicting_protein" = as.numeric(rownames(genie_result),.)) %>%
pivot_longer(!predicting_protein, names_to = "masked_protein", values_to = "genie3") %>%
mutate("masked_protein" = str_extract(masked_protein, "[^X](.*)"))
GENIE_frame$genie3 %>% class()
GENIE_frame$predicting_protein <- as.numeric(GENIE_frame$predicting_protein)
GENIE_frame$masked_protein <- as.numeric(GENIE_frame$masked_protein)
###########################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
RAWPATH = '../results/artificial/homogeneous/raw_data/'
filenames <- list.files(RAWPATH)
test_data <-rbindlist(lapply(filenames, function(filename) fread(paste0(RAWPATH, filename)))) %>%
dplyr::select(-V1)
test_data$LRP = abs(test_data$LRP)
#################################################
test_data_dir <- test_data %>% dplyr::select(LRP, predicting_protein, masked_protein, sample_name)
test_data_trans <- test_data_dir
colnames(test_data_trans) <- c("tLRP", "masked_protein", "predicting_protein","sample_name")
test_data_sym <- left_join(test_data_dir, test_data_trans) %>%
dplyr::mutate("LRP" = 0.5*(tLRP+LRP))
mean_test_data <- test_data_sym %>%
group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP)) %>%
mutate("logLRP" = log(1+meanLRP)) %>%
mutate("interaction" = ifelse(predicting_protein %/%8 == masked_protein%/% 8,1,0)) %>%
mutate(predicting_protein = predicting_protein+1, "masked_protein" = masked_protein+1) %>%
left_join(correlation_frame)%>%
left_join(GENIE_frame)
mean_test_data$absCORR[mean_test_data$predicting_protein==mean_test_data$masked_protein] <- 0
mean_test_data$interaction[mean_test_data$predicting_protein==mean_test_data$masked_protein] <- 0
mean_test_data_correlated <- mean_test_data
plot_theme <-   theme(
legend.position = "bottom",
legend.margin = margin(0,0,0,0),
legend.box.margin = margin(-25,-30,0,0),
legend.title = element_blank(),
legend.text = element_text(size=15),
plot.title = element_text(size = 30, face = 'plain'),
axis.title = element_blank(),
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plot_theme_adj <-   theme(plot.title = element_text(size = 20),
legend.position = "bottom",
legend.margin = margin(0,0,0,0),
legend.box.margin = margin(-25,-30,0,0),
legend.title = element_blank(),
legend.text = element_text(size=15),
axis.title = element_blank(),
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plot_LRP_dep <- ggplot(mean_test_data_correlated, aes(x=predicting_protein, y = masked_protein, fill = meanLRP)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral", breaks = c(0,10,20))+
ggtitle("Median LRP")+
scale_y_continuous(trans = "reverse") +
plot_theme
#scale_fill_gradient(low ="gray50", high ="red")
plot_CORR_dep <- ggplot(mean_test_data_correlated, aes(x=predicting_protein, y = masked_protein, fill = absCORR)) +
geom_tile() +
scale_fill_distiller(breaks = c(0,1.0), limits = c(0,1.0),palette = "Spectral")+
ggtitle("Peason's r")+
scale_y_continuous(trans = "reverse") +
plot_theme
plot_GENIE3_dep <- ggplot(mean_test_data_correlated, aes(x=predicting_protein, y = masked_protein, fill = genie3)) +
geom_tile() +
scale_fill_distiller(breaks = c(0,1.0), limits = c(0,1.0),palette = "Spectral")+
ggtitle("GENIE3")+
scale_y_continuous(trans = "reverse") +
plot_theme
#scale_fill_gradient(low ="gray50", high ="red")
#######################
example_set <- mean_test_data
example_set$interaction[example_set$predicting_protein==example_set$masked_protein] <- 1
example_heatmap <- ggplot(example_set, aes(x=predicting_protein, y = masked_protein, fill = interaction)) +
geom_tile() +
scale_fill_distiller(breaks = c(0,1), palette = "Spectral")+
ggtitle("Ground truth")+
scale_y_continuous(trans = "reverse") +
plot_theme
adj_mat <- example_set %>% dplyr::select(predicting_protein, masked_protein, interaction) %>% distinct() %>%
pivot_wider(names_from = masked_protein, values_from = interaction)
adj_matrix <- adj_mat[,-1] %>% as.matrix()
rownames(adj_matrix) <- adj_mat$predicting_protein
example_graph <- graph_from_adjacency_matrix(adj_matrix, weighted=T, mode="directed") %>% simplify()
E(example_graph)$weight <- 0.01
l <- layout_nicely(example_graph)
plot(example_graph, layout = l, main = "Network", main.cex= 30, vertex.label= NA, vertex.label.cex = 0.8, vertex.size = 2, vertex.color = "black", arrow.width = 0.01,
edge.arrow.size = 0.05, edge.width=0.1,edge.color = "black", rescale = T)
######################################
library(pROC)
roc_LRP_dep <- roc(mean_test_data_correlated$interaction, mean_test_data_correlated$meanLRP,   plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE)
roc_CORR_dep <- roc(mean_test_data_correlated$interaction, mean_test_data_correlated$absCORR,  plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE)
roc_GENIE_dep <- roc(mean_test_data_correlated$interaction, mean_test_data_correlated$genie3,  plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE)
##################################################################
fontsize = 2.5
position = 0.7
library(gridExtra)
library(ggplotify)
library(grid)
library("cowplot")
img2grob <- function(x) as.grob(expression(x))
png('./figures/one_network_genie.png', width = 3000, height = 1400)
plot_grid(
example_heatmap,
plot_LRP_dep,
plot_CORR_dep,
plot_GENIE3_dep,
as.grob(expression((plot(example_graph, layout = l, main = "Graph", main.cex= 20, vertex.label= NA, vertex.label.cex = 0.8, vertex.label.dist=0.5, vertex.size = 2, vertex.color = "black",
arrow.width = 0.01,
edge.arrow.size = 0.05, edge.width=0.1,edge.color = "black", rescale = T)))),
as.grob(expression(plot.roc(roc_LRP_dep,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=fontsize, print.auc.x=position,cex.lab = 1.5))),
as.grob(expression(plot.roc(roc_CORR_dep,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=fontsize, print.auc.x=position, cex.lab = 1.5))),
as.grob(expression(plot.roc(roc_GENIE_dep,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=fontsize, print.auc.x=position, cex.lab = 1.5))),
nrow=2,
labels = c("A", "C", "E", "G", "B", "D", "F", "H"),
label_size = 20
)
dev.off()
#############################
#par(cex.axis=1.8) # size of axis text of roc plots
for_other_script <- plot_grid(
example_heatmap,
plot_LRP_dep,
plot_CORR_dep,
plot_GENIE3_dep,
as.grob(expression((plot(example_graph, layout = l, vertex.label= NA, vertex.label.cex = 0.8, vertex.label.dist=0.5, vertex.size = 2, vertex.color = "black",
arrow.width = 0.01,
edge.arrow.size = 0.05, edge.width=0.1,edge.color = "black", rescale = T)))),
as.grob(expression(plot.roc(roc_LRP_dep,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=fontsize, print.auc.x=position, yaxp  = c(0, 1, 1),xaxp  = c(0, 1, 1), cex.axis = 2.0,cex.lab = 2.3))),
as.grob(expression(plot.roc(roc_CORR_dep,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=fontsize, print.auc.x=position, yaxp  = c(0, 1, 1),xaxp  = c(0, 1, 1), cex.axis =2.0,cex.lab = 2.3))),
as.grob(expression(plot.roc(roc_GENIE_dep,  auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, print.auc.cex=fontsize, print.auc.x=position, yaxp  = c(0, 1, 1),xaxp  = c(0, 1, 1), cex.axis =2.0,cex.lab = 2.3))),
nrow=2,
labels = c("A", "C", "E", "G", "B", "D", "F", "H"),
label_size = 35,
label_fontface = 'plain'
)
for_other_script
saveRDS(for_other_script, file = "./figures/part1.rds")
#################
roc(mean_test_data_correlated$interaction, mean_test_data_correlated$meanLRP,   plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, ci=T)
roc(mean_test_data_correlated$interaction, mean_test_data_correlated$absCORR,  plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE,ci=T)
roc(mean_test_data_correlated$interaction, mean_test_data_correlated$genie3,   plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE, print.auc=TRUE, ci=T)
for_other_script
