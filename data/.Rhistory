ncorrect
#############################
h1 <- highest_names[1:36,] %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
sym_LRP <- sym_LRP %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
subset_data <- left_join(h1, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, Cancer_Type) %>%
dplyr::summarize("meanLRP" = median(LRP_sym))
########################
medians_IQR <- left_join(h1, sym_LRP) %>%dplyr::select(-Cancer_Type) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h1, sym_LRP)
myanova <- function(id) {
curr_h <- h1[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ Cancer_Type, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$Cancer_Type = "ACC"
################################
high_names <- subset_data %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset_data, aes(x = Cancer_Type, y =meanLRP, fill = Cancer_Type), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.6)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
#geom_text(data = description, aes(x = 10, y = 18, label = paste('median: ', round(meanLRP, digits=1), 'IQR: ', round(IQR, digits=1)))) +
#geom_text(data = description, aes(x = 10, y = 16, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.5)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("../plots_statistics/figures/highest_wrap.png",width = 1000, height = 1000)
plotobject2
dev.off()
plotobject2
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
#geom_text(data = description, aes(x = 10, y = 18, label = paste('median: ', round(meanLRP, digits=1), 'IQR: ', round(IQR, digits=1)))) +
#geom_text(data = description, aes(x = 10, y = 16, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("../plots_statistics/figures/highest_wrap.png",width = 1000, height = 1000)
plotobject2
dev.off()
plotobject2
k = 100
full_frame <- left_join(adj_react_long_sym, sym_highest_LRP, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrect
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
results <- read.csv('cv.csv') %>%
group_by(depth, neurons, epoch,  lr) %>%
dplyr::summarize(meanloss = mean(testloss), medianloss = median(testloss),n = n())
forplot <-  read.csv('cv.csv') %>%
mutate(depth = paste0('depth = ', depth), lr_loop = paste0(lr, loop))
png('../../plots_statistics/figures/crossval_median.png', height=800, width=800, res=100)
ggplot(results, aes(x = epoch, y = medianloss, group = lr, color =as.factor(lr))) +
geom_line() +
facet_grid(as.factor(depth)~neurons) +
scale_y_continuous(trans='log10') +
#scale_x_continuous(trans='log10') +
theme_bw()
dev.off()
png('../../plots_statistics/figures/crossval.png', height=1000, width=1000, res=100)
ggplot(forplot, aes(x = epoch, y = testloss, group = lr_loop, color =as.factor(lr))) +
geom_line() +
facet_grid(as.factor(depth)~neurons) +
scale_y_continuous(trans='log2') +
#scale_x_continuous(trans='log10') +
theme_bw()
dev.off()
ggplot(forplot, aes(x = epoch, y = testloss, group = lr_loop, color =as.factor(lr))) +
geom_line() +
facet_grid(as.factor(depth)~neurons) +
scale_y_continuous(trans='log2') +
#scale_x_continuous(trans='log10') +
theme_bw()
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(parallel)
library(DescTools)
library(gplots)
library(pbmcapply)
library(data.table)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
numCores <- detectCores()
setwd('.') # wd to relprop result files
RAWPATH = '../results/LRP/raw_data/'
USEPATH = '../results/LRP/use_data/'
dir.create(USEPATH)
filenames <- list.files(RAWPATH)
all_data <-rbindlist(lapply(filenames, function(filename) fread(paste0(RAWPATH, filename)))) %>%
dplyr::select(-V1)
ORGANS <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
dplyr::select(ID, Cancer_Type)
all_data_ORGAN <- inner_join(ORGANS, all_data, by = c('ID'='sample_name') )
write.csv(all_data_ORGAN,paste0(USEPATH, 'all_data.csv'), row.names=F)
print(dim(all_data))
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(DescTools)
library(gplots)
library(ComplexHeatmap)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(mvMORPH)
library(stats)
library(xtable)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
test_data <- fread('../results/LRP/use_data/all_data.csv')
test_data$LRP <- test_data$LRP %>% abs()
##################
##############################################################################################################################
#load ground truth data
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
dplyr::select(-Cancer_Type)
for_correlation <- test_data %>% dplyr::select(ID, y, y_pred) %>%
unique() %>%
group_by(ID)
correlation <- ddply(for_correlation, "ID", summarize, "corr" = cor(y, y_pred))
highcorrelation <- correlation %>% filter(corr>0.01)
rcorr(for_correlation$y, for_correlation$y_pred)
case_numbers_old <- test_data %>% group_by(ID) %>% dplyr::summarize("Cancer_Type" = max(Cancer_Type))
summary(as.factor(case_numbers_old$Cancer_Type))
test_data <- test_data %>% filter(ID %in% highcorrelation$ID)
########################################
#facet wrap of highest values
#SYMMETRIZED
# not grouped by ORGANS!!
number_interactions = 36
################
##################
#symmetrize data
LRP_dir <- test_data %>% dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, LRP)
LRP_trans <- LRP_dir
colnames(LRP_trans) <- c('ID','Cancer_Type', "masked_protein", "predicting_protein", "tLRP")
sym_LRP <- left_join(LRP_dir, LRP_trans) %>% mutate("LRP_sym" = 0.5*(LRP+tLRP)) %>%
arrange(desc(LRP_sym)) %>% filter(predicting_protein >=masked_protein) %>% dplyr::select(-c(LRP, tLRP))
sym_highest_LRP <- sym_LRP %>%
group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym)) %>%
ungroup() %>%
arrange(desc(meanLRP)) %>% dplyr::select(predicting_protein, masked_protein, meanLRP)
############################
############################
#compare with reactome
setwd('../data/')
adj_react <- read.delim('int_react_147_060418.csv', header = F)
colnames(adj_react) <- c("masked_protein", as.character(adj_react$V1))
adj_react_matrix <- as.matrix(adj_react[,-1])
rownames(adj_react_matrix) <- as.character(adj_react$masked_protein)
# order names alphanumerically
adj_react_matrix_ordered <- adj_react_matrix[str_order(rownames(adj_react_matrix)), str_order(colnames(adj_react_matrix))]
adj_react_long <- pivot_longer(adj_react,cols=!masked_protein, names_to = "predicting_protein", values_to = "edge")
adj_react_long$predicting_protein <- as.character(adj_react_long$predicting_protein)
adj_react_long$masked_protein <- as.character(adj_react_long$masked_protein)
adj_react_long_sym <- adj_react_long %>% filter((predicting_protein) > (masked_protein))
k = 100
full_frame <- left_join(adj_react_long_sym, sym_highest_LRP, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrect
#############################
# filter out phosphorylation variants
highest_names <- tidyr::extract(sym_highest_LRP, predicting_protein, into ="p", "([^_]*).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "([^_]*).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
tidyr::extract(predicting_protein, into ="p", "(..).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "(..).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
ungroup %>%
dplyr::select(predicting_protein, masked_protein, meanLRP)
############################
#compare with reactome
full_frame <- left_join(adj_react_long_sym, highest_names, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:36,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
k = 36
phyper(ncorrect-1, ncorrectall, nfalseall, 36, lower.tail = F, log.p = FALSE)
ncorrect
#############################
h1 <- highest_names[1:36,] %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
sym_LRP <- sym_LRP %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
subset_data <- left_join(h1, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, Cancer_Type) %>%
dplyr::summarize("meanLRP" = median(LRP_sym))
########################
medians_IQR <- left_join(h1, sym_LRP) %>%dplyr::select(-Cancer_Type) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h1, sym_LRP)
myanova <- function(id) {
curr_h <- h1[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ Cancer_Type, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$Cancer_Type = "ACC"
################################
high_names <- subset_data %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset_data, aes(x = Cancer_Type, y =meanLRP, fill = Cancer_Type), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.6)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
#geom_text(data = description, aes(x = 10, y = 18, label = paste('median: ', round(meanLRP, digits=1), 'IQR: ', round(IQR, digits=1)))) +
#geom_text(data = description, aes(x = 10, y = 16, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("../plots_statistics/figures/highest_wrap.png",width = 1000, height = 1000)
plotobject2
dev.off()
plotobject2
summary(as.factor(case_numbers_old$Cancer_Type))
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(parallel)
library(DescTools)
library(gplots)
library(pbmcapply)
library(data.table)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
numCores <- detectCores()
setwd('.') # wd to relprop result files
RAWPATH = '../results/LRP/raw_data/'
USEPATH = '../results/LRP/use_data/'
dir.create(USEPATH)
filenames <- list.files(RAWPATH)
all_data <-rbindlist(lapply(filenames, function(filename) fread(paste0(RAWPATH, filename)))) %>%
dplyr::select(-V1)
ORGANS <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
dplyr::select(ID, Cancer_Type)
all_data_ORGAN <- inner_join(ORGANS, all_data, by = c('ID'='sample_name') )
write.csv(all_data_ORGAN,paste0(USEPATH, 'all_data.csv'), row.names=F)
print(dim(all_data))
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(DescTools)
library(gplots)
library(ComplexHeatmap)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(mvMORPH)
library(stats)
library(xtable)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
test_data <- fread('../results/LRP/use_data/all_data.csv')
test_data$LRP <- test_data$LRP %>% abs()
##################
##############################################################################################################################
#load ground truth data
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
dplyr::select(-Cancer_Type)
for_correlation <- test_data %>% dplyr::select(ID, y, y_pred) %>%
unique() %>%
group_by(ID)
correlation <- ddply(for_correlation, "ID", summarize, "corr" = cor(y, y_pred))
highcorrelation <- correlation %>% filter(corr>0.01)
rcorr(for_correlation$y, for_correlation$y_pred)
case_numbers_old <- test_data %>% group_by(ID) %>% dplyr::summarize("Cancer_Type" = max(Cancer_Type))
summary(as.factor(case_numbers_old$Cancer_Type))
test_data <- test_data %>% filter(ID %in% highcorrelation$ID)
########################################
#facet wrap of highest values
#SYMMETRIZED
# not grouped by ORGANS!!
number_interactions = 36
################
##################
#symmetrize data
LRP_dir <- test_data %>% dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, LRP)
LRP_trans <- LRP_dir
colnames(LRP_trans) <- c('ID','Cancer_Type', "masked_protein", "predicting_protein", "tLRP")
sym_LRP <- left_join(LRP_dir, LRP_trans) %>% mutate("LRP_sym" = 0.5*(LRP+tLRP)) %>%
arrange(desc(LRP_sym)) %>% filter(predicting_protein >=masked_protein) %>% dplyr::select(-c(LRP, tLRP))
sym_highest_LRP <- sym_LRP %>%
group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym)) %>%
ungroup() %>%
arrange(desc(meanLRP)) %>% dplyr::select(predicting_protein, masked_protein, meanLRP)
############################
############################
#compare with reactome
setwd('../data/')
adj_react <- read.delim('int_react_147_060418.csv', header = F)
colnames(adj_react) <- c("masked_protein", as.character(adj_react$V1))
adj_react_matrix <- as.matrix(adj_react[,-1])
rownames(adj_react_matrix) <- as.character(adj_react$masked_protein)
# order names alphanumerically
adj_react_matrix_ordered <- adj_react_matrix[str_order(rownames(adj_react_matrix)), str_order(colnames(adj_react_matrix))]
adj_react_long <- pivot_longer(adj_react,cols=!masked_protein, names_to = "predicting_protein", values_to = "edge")
adj_react_long$predicting_protein <- as.character(adj_react_long$predicting_protein)
adj_react_long$masked_protein <- as.character(adj_react_long$masked_protein)
adj_react_long_sym <- adj_react_long %>% filter((predicting_protein) > (masked_protein))
k = 100
full_frame <- left_join(adj_react_long_sym, sym_highest_LRP, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrect
#############################
# filter out phosphorylation variants
highest_names <- tidyr::extract(sym_highest_LRP, predicting_protein, into ="p", "([^_]*).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "([^_]*).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
tidyr::extract(predicting_protein, into ="p", "(..).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "(..).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
ungroup %>%
dplyr::select(predicting_protein, masked_protein, meanLRP)
############################
#compare with reactome
full_frame <- left_join(adj_react_long_sym, highest_names, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:36,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
k = 36
phyper(ncorrect-1, ncorrectall, nfalseall, 36, lower.tail = F, log.p = FALSE)
ncorrect
#############################
h1 <- highest_names[1:36,] %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
sym_LRP <- sym_LRP %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
subset_data <- left_join(h1, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, Cancer_Type) %>%
dplyr::summarize("meanLRP" = median(LRP_sym))
########################
medians_IQR <- left_join(h1, sym_LRP) %>%dplyr::select(-Cancer_Type) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h1, sym_LRP)
myanova <- function(id) {
curr_h <- h1[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ Cancer_Type, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$Cancer_Type = "ACC"
################################
high_names <- subset_data %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset_data, aes(x = Cancer_Type, y =meanLRP, fill = Cancer_Type), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.6)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
#geom_text(data = description, aes(x = 10, y = 18, label = paste('median: ', round(meanLRP, digits=1), 'IQR: ', round(IQR, digits=1)))) +
#geom_text(data = description, aes(x = 10, y = 16, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("../plots_statistics/figures/highest_wrap.png",width = 1000, height = 1000)
plotobject2
dev.off()
plotobject2
summary(as.factor(case_numbers_old$Cancer_Type))
