dplyr::select(-Cancer_Type)
for_correlation <- test_data %>% dplyr::select(ID, y, y_pred) %>%
unique() %>%
group_by(ID)
correlation <- ddply(for_correlation, "ID", summarize, "corr" = cor(y, y_pred))
highcorrelation <- correlation %>% filter(corr>0.8)
rcorr(for_correlation$y, for_correlation$y_pred)
ID_numbers_old <- test_data %>% group_by(ID) %>% dplyr::summarize("Cancer_Type" = max(Cancer_Type))
summary(as.factor(ID_numbers_old$Cancer_Type))
test_data <- test_data %>% filter(ID %in% highcorrelation$ID)
######################################
test_data_dir <- test_data %>% dplyr::select(ID, predicting_protein, masked_protein, 'dLRP' = LRP, Cancer_Type)
test_data_trans <- test_data_dir
colnames(test_data_trans) <- c('ID', 'masked_protein', 'predicting_protein', 'tLRP', 'Cancer_Type')
test_data_sym <- left_join(test_data_dir, test_data_trans) %>% dplyr::mutate(LRP = 0.5*(abs(dLRP) + abs(tLRP)))
united_whole_set <- test_data_sym %>% unite('interactions', c("predicting_protein", "masked_protein")) %>%
dplyr::select(LRP, Cancer_Type, interactions, ID)
united_whole_set$LRP <- log(1+abs(united_whole_set$LRP*100))
united_whole_set$LRP <-(united_whole_set$LRP - mean(united_whole_set$LRP))/sd(united_whole_set$LRP)
united_whole_set_wide <- pivot_wider(united_whole_set, names_from=interactions, values_from = LRP)
united_whole_matrix <- as.matrix(united_whole_set_wide[,-c(1,2)])
is.na(united_whole_matrix) %>% sum()
set.seed(0)
whole_tsne_values <- Rtsne(united_whole_matrix, dim=2, perplexity = 15)
set.seed(0)
dbclusters <- whole_tsne_values$Y %>% dbscan(eps = 3.3, minPts = 15) %>% .$cluster %>% as.factor() # 3.7, 15
dbclusters <- whole_tsne_values$Y %>% dbscan(eps = 3.7, minPts = 15) %>% .$cluster %>% as.factor() # 3.7, 15
cluster_data = data.frame(dbclusters, Cancer_Type = united_whole_set_wide$Cancer_Type, ID= united_whole_set_wide$ID, x =whole_tsne_values$Y[,1], y = whole_tsne_values$Y[,2] )
tsne_plot <- data.frame(x = whole_tsne_values$Y[,1], y = whole_tsne_values$Y[,2], Cancer_Type = united_whole_set_wide$Cancer_Type)
########################
#plot_tsne with ellipses
mytsnecluster <-ggplot(tsne_plot, aes(x=x, y=y)) +
geom_point(data = tsne_plot[dbclusters!=0,], aes(x=x, y=y, color=dbclusters[dbclusters!=0])) +
geom_point(data = tsne_plot[dbclusters==0,], aes(x=x, y=y), color="black") +
stat_ellipse(data = tsne_plot[dbclusters!=0,], aes(color = dbclusters[dbclusters!=0])) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"))
plot(mytsnecluster)
####################
library(ggforce)
limit = 20
mytsne <- ggplot(tsne_plot) +
geom_point(aes(x=x, y=y, color=Cancer_Type)) +
geom_mark_ellipse(data = tsne_plot[dbclusters!=0 & as.numeric(dbclusters)<=limit,], aes(x=x, y=y, group = dbclusters[dbclusters!=0 & as.numeric(dbclusters)<=limit], label = dbclusters[dbclusters!=0 & as.numeric(dbclusters)<=limit]),
label.buffer = unit(0.1, 'mm'), con.cap = 0.01, con.type = "straight", label.fontsize = 30, label.fontface = 'plain') +
#geom_label(aes(x=x, y=y, label=Cancer_Type))+
labs(col="Cancer")+
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size=20),
legend.title = element_text(size=20),
axis.text = element_text(size=15),
axis.title = element_text(size=20))+
guides(color = guide_legend(override.aes = list(size = 4)))
png(paste('./figures/interaction_tsne_numbered', '.png', sep = ""), width = 1400, height = 1400, res = 120)
par(mar=c(10,10,10,10))
plot(mytsne)
dev.off()
library(ggplot2)
library(stringr)
library(magrittr)
library(tiyr)
library(dplyr)
library(DescTools)
library(gplots)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(igraph)
library(e1071)
library(VGAM)
library(abind)
library(graphlayouts)
library(ComplexHeatmap)
library(plyr)
library(stats)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
textsize = 30
axistext=30
RAWPATH = '../results/artificial/heterogeneous/raw_data/'
filenames <- list.files(RAWPATH)
LRP_data_raw <-rbindlist(lapply(filenames, function(filename) fread(paste0(RAWPATH, filename)))) %>%
dplyr::select(LRP, predicting_protein, masked_protein, sample_name)
LRP_data_raw$LRP = abs(LRP_data_raw$LRP)
LRP_data_d <- LRP_data_raw
colnames(LRP_data_d) <- c("dLRP", "predicting_protein", "masked_protein", "sample_name")
LRP_data_t <- LRP_data_raw %>% dplyr::select(predicting_protein, masked_protein, sample_name, LRP)
colnames(LRP_data_t) <- c("masked_protein", "predicting_protein", "sample_name", "tLRP")
LRP_data <- left_join(LRP_data_d, LRP_data_t, by = c("predicting_protein", "masked_protein", "sample_name")) %>% mutate("LRP" = 0.5*(dLRP+tLRP))
#specifiy number of samples per row
numberpresample = 15
sample_names <- LRP_data$sample_name %>%unique()
set.seed(1)
group1 <- sample(sample_names[sample_names < 1000], numberpresample)
set.seed(2)
group2 <- sample(sample_names[sample_names >= 1000 & sample_names < 2000], numberpresample)
set.seed(3)
group3 <- sample(sample_names[sample_names >= 2000 & sample_names < 3000], numberpresample)
set.seed(4)
group4 <- sample(sample_names[sample_names >= 3000 & sample_names < 4000], numberpresample)
#add group variable and select sample_names for display
LRP_data_sel  <- LRP_data %>%
dplyr::group_by(predicting_protein, masked_protein) %>%
mutate("sample_group" = sample_name %/%1000+1) %>%
filter(sample_name %in% c(group1,group2,group3,group4)) %>%
group_by(sample_group) %>%
dplyr::mutate('rank' = as.factor(as.numeric(as.factor(sample_name))))
# build log LRP for better visibility
log_LRP_sel <- LRP_data_sel %>% dplyr::select(predicting_protein, masked_protein, LRP, sample_name, sample_group, rank) %>%
group_by(sample_name) %>%
mutate("LRP" = LRP, "group_sample_name" = sample_name%%1000)
showsample_name <- log_LRP_sel%>% filter(rank ==1) %>%
mutate("LRP" = ifelse(predicting_protein <= sample_group*8 & predicting_protein >= sample_group*8-7 &
masked_protein <= sample_group*8 & masked_protein >= sample_group*8-7,max(log_LRP_sel$LRP)*0.9,0))
showsample_name$rank = as.factor(0)
log_LRP_sel_combined <- rbind(showsample_name, log_LRP_sel) %>% dplyr::arrange(predicting_protein, masked_protein)
single_sample_plot <- ggplot(log_LRP_sel_combined, aes(predicting_protein, y = masked_protein, fill = LRP)) +
ggtitle('I') +
geom_tile() +
scale_y_continuous(trans = "reverse") +
facet_grid(sample_group ~ rank) +
theme_bw() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank(),
strip.text.y = element_text(size=axistext),
axis.title = element_text(size=textsize, face = 'plain'),
#title = element_text(size = 30, hjust = -1),
plot.title = element_text(size = 35, hjust = -0.02, face='plain'),
legend.title = element_text(size=textsize),
legend.text = element_text(size = axistext),
axis.text = element_text(size=axistext)
) +
xlab('Source protein') +
ylab('Target protein') +
#scale_fill_distiller(palette = "RdGy", direction = -1)+
scale_fill_distiller(palette = "Spectral")+
scale_x_continuous(breaks=c(1,20))
png('./figures/heatmaps.png', width = 3000, height = 1000)
single_sample_plot
dev.off()
#########################################################################################################
#boxplots
grouped_LRP_data <- LRP_data %>% mutate("sample_group" = as.numeric(sample_name) %/%1000+1, "pp_group" = as.numeric(predicting_protein) %/%8+1, "mp_group" = as.numeric(masked_protein) %/%8+1)
aggregated_LRP_data <- grouped_LRP_data %>% group_by(sample_name, pp_group, mp_group, sample_group) %>%
dplyr::summarize(meanLRP = (mean(LRP))) %>% mutate("grsample_name_" = 10*pp_group + mp_group)
aggregated_LRP_data$pp_group <- as.factor(aggregated_LRP_data$pp_group)
aggregated_LRP_data$mp_group <- as.factor(aggregated_LRP_data$mp_group)
levels(aggregated_LRP_data$pp_group) <- c("Pr 1-8", "Pr 9-16","Pr 17-24","Pr 25-32")
levels(aggregated_LRP_data$mp_group) <-c("Proteins 1-8", "Proteins 9-16","Proteins 17-24","Proteins 25-32")
boxplot <- ggplot(aggregated_LRP_data, aes(x =sample_group, y=(100*meanLRP), group = sample_group)) +
geom_boxplot(outlier.shape=NA) +
facet_grid(pp_group ~ mp_group)+
ggtitle('J') +
xlab("Interaction group")+
ylab("LRP")+
coord_trans(y = 'log2')+
scale_y_continuous(breaks = c(0.0,0.1, 1.0, 10)) +
theme_bw() +
theme(
axis.title = element_text(size=textsize),
axis.text = element_text(size=axistext),
#title = element_text(size = 30),
plot.title = element_text(size = 35, hjust = -0.04, face='plain'),
strip.background = element_blank(),
strip.text.x = element_text(size= 0.9*axistext),
strip.text.y = element_text(size= 0.9* axistext)
)
png(paste('./figures/art_box_plot.png'), width = 1000, height = 800)
boxplot
dev.off()
############
library(Rtsne)
library(tidyr)
LRP_data_wide <- LRP_data %>% mutate("grid_" = 100*as.numeric(predicting_protein) + 1*as.numeric(masked_protein),"sample_group" = as.numeric(sample_name) %/%1000+1) %>%
dplyr::select(grid_, LRP, sample_name, sample_group) %>%
pivot_wider(names_from ="grid_", values_from=LRP)
normalize <- function(x) {
x <- as.numeric(x)
(x-mean(x))/sd(x)
}
LRP_data_matrix <- LRP_data_wide #log(LRP_data_wide+0.01)
#LRP_data_matrix <- apply(LRP_data_wide[,-c(1,2)],1,normalize)
tsne<- Rtsne(as.matrix(LRP_data_matrix[,-c(1:2)]), check_duplicates = F, perplexity = 15)
tsne_plot <- data.frame(x = tsne$Y[,1], y = tsne$Y[,2], sample_group = LRP_data_wide$sample_group)
art_tsne <- ggplot(tsne_plot, aes(x=x, y=y, color = as.factor(sample_group))) + geom_point() +
ggtitle('K') +
labs(color = "Interaction group") +
theme_bw()+
theme(
axis.title = element_text(size=textsize),
#title = element_text(size = 30, hjust = -0.01),
plot.title = element_text(size = 35, hjust = -0.04, face='plain'),
legend.title = element_text(size=textsize),
legend.text = element_text(size=textsize),
axis.text = element_text(size=axistext)
) +
guides(colour = guide_legend(override.aes = list(size=2.5)))
png(paste('./figures/art_tsne.png'), width = 1000, height = 800)
art_tsne
dev.off()
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(DescTools)
library(gplots)
library(ComplexHeatmap)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(mvMORPH)
library(stats)
library(xtable)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
test_data <- fread('../results/LRP/use_data/all_data.csv')
test_data$LRP <- test_data$LRP %>% abs()
##################
##############################################################################################################################
#load ground truth data
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
dplyr::select(-Cancer_Type)
for_correlation <- test_data %>% dplyr::select(ID, y, y_pred) %>%
unique() %>%
group_by(ID)
correlation <- ddply(for_correlation, "ID", summarize, "corr" = cor(y, y_pred))
highcorrelation <- correlation %>% filter(corr>0.5)
rcorr(for_correlation$y, for_correlation$y_pred)
case_numbers_old <- test_data %>% group_by(ID) %>% dplyr::summarize("Cancer_Type" = max(Cancer_Type))
summary(as.factor(case_numbers_old$Cancer_Type))
test_data <- test_data %>% filter(ID %in% highcorrelation$ID)
########################################
#facet wrap of highest values
#SYMMETRIZED
# not grouped by ORGANS!!
number_interactions = 36
################
##################
#symmetrize data
LRP_dir <- test_data %>% dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, LRP)
LRP_trans <- LRP_dir
colnames(LRP_trans) <- c('ID','Cancer_Type', "masked_protein", "predicting_protein", "tLRP")
sym_LRP <- left_join(LRP_dir, LRP_trans) %>% mutate("LRP_sym" = 0.5*(LRP+tLRP)) %>%
arrange(desc(LRP_sym)) %>% filter(predicting_protein >=masked_protein) %>% dplyr::select(-c(LRP, tLRP))
sym_highest_LRP <- sym_LRP %>%
group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym)) %>%
ungroup() %>%
arrange(desc(meanLRP)) %>% dplyr::select(predicting_protein, masked_protein, meanLRP)
############################
############################
#compare with reactome
setwd('../data/')
adj_react <- read.delim('int_react_147_060418.csv', header = F)
colnames(adj_react) <- c("masked_protein", as.character(adj_react$V1))
adj_react_matrix <- as.matrix(adj_react[,-1])
rownames(adj_react_matrix) <- as.character(adj_react$masked_protein)
# order names alphanumerically
adj_react_matrix_ordered <- adj_react_matrix[str_order(rownames(adj_react_matrix)), str_order(colnames(adj_react_matrix))]
adj_react_long <- pivot_longer(adj_react,cols=!masked_protein, names_to = "predicting_protein", values_to = "edge")
adj_react_long$predicting_protein <- as.character(adj_react_long$predicting_protein)
adj_react_long$masked_protein <- as.character(adj_react_long$masked_protein)
adj_react_long_sym <- adj_react_long %>% filter((predicting_protein) > (masked_protein))
k = 100
full_frame <- left_join(adj_react_long_sym, sym_highest_LRP, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrect
#############################
# filter out phosphorylation variants
highest_names <- tidyr::extract(sym_highest_LRP, predicting_protein, into ="p", "([^_]*).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "([^_]*).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
tidyr::extract(predicting_protein, into ="p", "(..).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "(..).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
ungroup %>%
dplyr::select(predicting_protein, masked_protein, meanLRP)
############################
#compare with reactome
full_frame <- left_join(adj_react_long_sym, highest_names, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:36,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
k = 36
phyper(ncorrect-1, ncorrectall, nfalseall, 36, lower.tail = F, log.p = FALSE)
ncorrect
#############################
h1 <- highest_names[1:36,] %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
sym_LRP <- sym_LRP %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
subset_data <- left_join(h1, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, Cancer_Type) %>%
dplyr::summarize("meanLRP" = median(LRP_sym))
########################
medians_IQR <- left_join(h1, sym_LRP) %>%dplyr::select(-Cancer_Type) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h1, sym_LRP)
myanova <- function(id) {
curr_h <- h1[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ Cancer_Type, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$Cancer_Type = "ACC"
################################
high_names <- subset_data %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset_data, aes(x = Cancer_Type, y =meanLRP, fill = Cancer_Type), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
#scale_y_continuous(expand= expansion(c(0,0.05)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
geom_text(data = description, aes(x = 10, y = 0.10, label = paste('median: ', round(meanLRP, digits=3), 'IQR: ', round(IQR, digits=3)))) +
geom_text(data = description, aes(x = 11, y = 0.09, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("../plots_statistics/figures/highest_wrap.png",width = 1000, height = 1000)
plotobject2
dev.off()
plotobject2
#########################################################################################
h2 <- highest_names[37:72,]
subset <- left_join(h2, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, ORGAN) %>%
dplyr::summarize("meanLRP" = median(LRP_sym))
######
medians_IQR <- left_join(h2, sym_LRP) %>%dplyr::select(-ORGAN) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h2, sym_LRP)
myanova <- function(id) {
curr_h <- h2[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ ORGAN, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$ORGAN = "ACC"
#######
high_names <- subset %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset, aes(x = ORGAN, y =meanLRP, fill = ORGAN), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = ORGAN),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.6)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = ORGAN),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
geom_text(data = description, aes(x = 10, y = 18, label = paste('median: ', round(meanLRP, digits=1), 'IQR: ', round(IQR, digits=1)))) +
geom_text(data = description, aes(x = 10, y = 16, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("/mnt/scratch2/mlprot/mlprot_220920/plots_statistics/figures/highest_wrap2.png",width = 1000, height = 1000)
plotobject2
dev.off()
###
h3 <- highest_names[73:108,]
subset <- left_join(h3, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, ORGAN) %>%
dplyr::summarize("meanLRP" = median(LRP_sym))
######
medians_IQR <- left_join(h3, sym_LRP) %>%dplyr::select(-ORGAN) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h3, sym_LRP)
myanova <- function(id) {
curr_h <- h3[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ ORGAN, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$ORGAN = "ACC"
#######
high_names <- subset %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset, aes(x = ORGAN, y =meanLRP, fill = ORGAN), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = ORGAN),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, ncol = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.6)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = ORGAN),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
geom_text(data = description, aes(x = 10, y = 18, label = paste('median: ', round(meanLRP, digits=1), 'IQR: ', round(IQR, digits=1)))) +
geom_text(data = description, aes(x = 10, y = 16, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("/mnt/scratch2/mlprot/mlprot_220920/plots_statistics/figures/highest_wrap3.png",width = 1000, height = 1000)
plotobject2
dev.off()
############################################
####################################
#test LRP values of phosphorylated variants
highest_LRP <- sym_LRP %>%
tidyr::extract(masked_protein, into ="m", "([^_]*).*", remove = F) %>%
tidyr::extract(predicting_protein, into ="p", "([^_]*).*", remove = F) %>%
filter(predicting_protein!=masked_protein) %>%
mutate("phosphointeract" = ifelse(m==p,1,0))
result <- wilcox.test(LRP_sym ~ phosphointeract, highest_LRP)
result2 <- t.test(LRP_sym ~ phosphointeract, highest_LRP)
result
result2
result
median(highest_LRP %>% filter(phosphointeract ==1) %>% .$LRP)
IQR(highest_LRP %>% filter(phosphointeract ==1) %>% .$LRP)
median(highest_LRP %>% filter(phosphointeract ==0) %>% .$LRP)
median(highest_LRP %>% filter(phosphointeract ==1) %>% .$LRP)
IQR(highest_LRP %>% filter(phosphointeract ==1) %>% .$LRP)
median(highest_LRP %>% filter(phosphointeract ==0) %>% .$LRP)
IQR(highest_LRP %>% filter(phosphointeract ==0) %>% .$LRP)
result
result$p.value
