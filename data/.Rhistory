legend.title = element_text(size=20),
axis.text = element_text(size=15),
axis.title = element_text(size=20))+
guides(color = guide_legend(override.aes = list(size = 4)))
png(paste('./figures/interaction_tsne_numbered', '.png', sep = ""), width = 1400, height = 1400, res = 120)
par(mar=c(10,10,10,10))
plot(mytsne)
dev.off()
################
#find largest clusters
summary_clusters <- summary(dbclusters[dbclusters!=0]) %>% sort(decreasing = T)
summary_clusters[1:8]
summary_clusters
#################
# generate median position
mean_frame <- aggregate(test_data$LRP, by = list(masked_protein = test_data$masked_protein, predicting_protein = test_data$predicting_protein), median)
mean_quantile <- quantile(mean_frame$x, 0.0)
mean_frame$x[mean_frame$x<mean_quantile] <- 0
mean_frame_wide <- mean_frame %>% pivot_wider(names_from = masked_protein, values_from = x)
mean_matrix <- mean_frame_wide[,-1] %>% as.matrix()
rownames(mean_matrix) <- mean_frame_wide$predicting_protein
mean_graph <- graph_from_adjacency_matrix(mean_matrix, mode = "directed", weighted = T)
E(mean_graph)[E(mean_graph)$weight>0]$color <- "red"
E(mean_graph)[E(mean_graph)$weight<0]$color <- "blue"
E(mean_graph)$weight <- 0.01 #* E(mean_graph)$weight) # 0.01/(1+E(mean_graph)$weight)
set.seed(1)
mean_positions =  layout_nicely(mean_graph) # layout_on_sphere(mean_graph) # layout_on_sphere(mean_graph) #
plot(mean_graph,  layout = mean_positions, vertex.label=NA, vertex.size = 2, vertex.color = "black", edge.width = 3, vertex.label.dist=1,
vertex.label.cex = 0.7, edge.arrow.width=0.4, edge.arrow.size=0.1, rescale = T)
################
seedfunction <- function(clusternumber){
seed=0
if (clusternumber==5) {seed = 0}
if (clusternumber==8) {seed = 0}
print(seed)
seed
}
cutofffunction <- function(clusternumber){
#for visibility
cutoff=0.9997
if (clusternumber==2) {cutoff = 0.999}
#if (clusternumber==6) {cutoff = 0.9998}
#if (clusternumber==8) {cutoff = 0.999}
cutoff
}
library(dplyr)
library(igraph)
dir.create('./figures/temp/')
nclusters <- dbclusters %>% unique %>% length()-1
for (current_cluster in seq(nclusters)){
current_cluster_position <- cluster_data %>% filter(dbclusters==current_cluster) #CAVE: cluster_data is not yet spaced, only applies to t-SNE
current_cluster_data <- test_data %>% filter(ID %in% current_cluster_position$ID)
####
#symmetrize current cluster data for average network
current_cluster_data_dir <- current_cluster_data %>% dplyr::select(predicting_protein, masked_protein, LRP, ID)
current_cluster_data_trans <- current_cluster_data_dir
colnames(current_cluster_data_trans)[1] <- "masked_protein"
colnames(current_cluster_data_trans)[2] <- "predicting_protein"
colnames(current_cluster_data_trans)[3] <- "tLRP"
current_cluster_data_sym <- left_join(current_cluster_data_dir, current_cluster_data_trans) %>%
mutate("LRP_sym" = 0.5*(abs(LRP)+abs(tLRP)))#%>%
#  dplyr::filter(predicting_protein>masked_protein)
####
average_frame <- current_cluster_data_sym %>% group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP"= median(LRP_sym)) %>%
pivot_wider(names_from = masked_protein, values_from = meanLRP)
average_matrix <- average_frame[,-1] %>% as.matrix()
rownames(average_matrix) <- average_frame$predicting_protein
average_matrix_ordered <- average_matrix[str_order(rownames(average_matrix)), str_order(colnames(average_matrix))]
cutoff_param <- cutofffunction(current_cluster)
#cutoff_ID <- average_matrix_ordered %>% abs() %>% quantile(cutoff_param)
####
forthresh <- current_cluster_data_sym %>% group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP"= median(LRP_sym)) %>%
dplyr::arrange(desc(meanLRP))
for (thresh in forthresh$meanLRP) {
high_edges <- forthresh %>% filter(meanLRP>=thresh)
if (c(high_edges$predicting_protein, high_edges$masked_protein) %>% unique() %>% length() >=7) {
cutoff_ID <- thresh
break
}
}
####
average_matrix_ordered_select <- ifelse(abs(average_matrix_ordered) >= cutoff_ID, average_matrix_ordered,0)
average_network <- graph_from_adjacency_matrix(average_matrix_ordered_select, weighted=T, mode="directed")
positions <- cbind(V(average_network),mean_positions)
#reduced_positions <- positions[degree(average_network) >0,]
vertices2delete <- positions[igraph::degree(average_network) ==0,1] %>% as.vector()
average_network2 <- delete_vertices(average_network, vertices2delete)
E(average_network2)[E(average_network2)$weight>0]$color <- "black"
thresh <- igraph::degree(average_network2) %>% sort(decreasing = T) %>% .[10] %>% max(c(.,1), na.rm=T)
selected_names <- V(average_network2)$name[rev(order(igraph::degree(average_network2)))] %>% .[1:min(20, length(.))]
set.seed(seedfunction(current_cluster))
l = layout_in_circle(average_network2, sample(seq(length(V(average_network2)))))
png(paste('./figures/temp/average_ID_', current_cluster, '.png', sep=""), width=2000, height = 1700, res=200)
#par(mar=c(4,11,5,8))
par(mar=c(0,11,0,8))
#qgraph(as_edgelist(average_network2),edge.labels=T)
#plot(average_network,  layout = mean_positions, vertex.label= ifelse(degree(average_network)>=thresh,V(average_network)$name, NA), vertex.size = 0.01, vertex.color = NA,
#     edge.width = 4.0, vertex.label.dist=1.0,
#     vertex.label.cex = 4.5, edge.arrow.width=0.1, edge.arrow.size=0.1, rescale = T)
plot(average_network2, layout = l, edge.width = 3.0, vertex.color = "white", vertex.size = 0, vertex.label.cex = 2.0, edge.arrow.size=0,
vertex.label= ifelse(V(average_network2)$name %in% selected_names,V(average_network2)$name, NA), vertex.label.family = "Helvetica")
text(x=-1.7, y=1.2, label=as.character(current_cluster), cex=5) #x=-1.3, y=1.2, cex=5
dev.off()
for (current_ID in current_cluster_position$ID) {
print(current_ID)
current_network_position <- current_cluster_position %>% filter(ID==current_ID)
current_network <- current_cluster_data %>% filter(ID==current_ID)
IDframe <- current_network %>%
dplyr::select(predicting_protein, masked_protein, LRP ) %>%
pivot_wider(names_from = "masked_protein", values_from = "LRP")
IDmatrix <- IDframe[,-1] %>% as.matrix()
rownames(IDmatrix) <- IDframe$predicting_protein
IDmatrix_ordered <- IDmatrix[str_order(rownames(IDmatrix)), str_order(colnames(IDmatrix))]
cutoff_ID <- IDmatrix_ordered %>% abs() %>% quantile(0.999)
IDmatrix_ordered_select <- ifelse(abs(IDmatrix_ordered) >= cutoff_ID, IDmatrix_ordered,0)
IDgraph <- graph_from_adjacency_matrix(IDmatrix_ordered_select, mode = "directed", weighted=T)
E(IDgraph)[E(IDgraph)$weight>0]$color <- "red"
E(IDgraph)[E(IDgraph)$weight<0]$color <- "blue"
current_positions <- data.frame(x = mean_positions[,1] + 10+current_network_position$x, y = mean_positions[,2] + 10+current_network_position$y) %>% as.matrix()
png(paste('./figures/temp/', current_ID, '.png', sep=""), width=500, height = 500)
par(bg=NA)
par(oma = c(0,0,0,0), mar=c(0,0,0,0))
plot(IDgraph,  layout = mean_positions, vertex.label=NA, vertex.size = 0.01, vertex.color = NA, edge.width = 4.0, vertex.label.dist=1,
vertex.label.cex = 0.7, edge.arrow.width=0.1, edge.arrow.size=0.1, rescale = T)
dev.off()
}
#########################
library(png)
scale_it <- function(x,low,high) {
x_scaled <- x/(max(x)-min(x))*(high-low)
x_end <- x_scaled-min(x_scaled)+low
}
image_size = 0.14 # 0.15
current_position_normalized <- current_cluster_position %>% mutate("x" = scale_it(x,0.5*image_size,1-0.5*image_size), "y" = scale_it(y,0.5*image_size,1-0.5*image_size))
png(paste('./figures/temp/','cluster_',current_cluster ,'.png', sep=""), width = 2000, height = 2000, res=200)
par(oma = c(0,0,0,0), mar=c(0,0,0,0)) #delete this?! was added 3.5.2021
plot.new()
for (current_ID in current_cluster_position$ID) {
print(current_ID)
current_image <- readPNG(paste('./figures/temp/', current_ID, '.png', sep=""))
#current_image[1:500, c(1:2,499:500),] <- 0
#current_image[c(1:2,499:500), 1:500, ] <- 0
current_network_position <- current_position_normalized %>% filter(ID==current_ID)
x = current_network_position$x
y = current_network_position$y
rasterImage(current_image, x-0.5*image_size,y-0.5*image_size,x+0.5*image_size,y+0.5*image_size)
}
text(x=0.0, y=0.95, label=as.character(current_cluster), cex=5)
dev.off()
}
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(parallel)
library(DescTools)
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(parallel)
library(DescTools)
library(gplots)
library(pbmcapply)
library(data.table)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
numCores <- detectCores()
setwd('.') # wd to relprop result files
RAWPATH = '../results/LRP/raw_data/'
USEPATH = '../results/LRP/use_data/'
dir.create(USEPATH)
filenames <- list.files(RAWPATH)
all_data <-rbindlist(lapply(filenames, function(filename) fread(paste0(RAWPATH, filename)))) %>%
dplyr::select(-V1)
ORGANS <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
dplyr::select(ID, Cancer_Type)
all_data_ORGAN <- inner_join(ORGANS, all_data, by = c('ID'='sample_name') )
print(length(filenames))
write.csv(all_data_ORGAN,paste0(USEPATH, 'all_data.csv'), row.names=F)
print(dim(all_data))
library(ggplot2)
library(stringr)
library(magrittr)
library(tidyr)
library(dplyr)
library(DescTools)
library(gplots)
library(ComplexHeatmap)
library(pbmcapply)
library(circlize)
library(data.table)
library(Hmisc)
library(stringi)
library(mvMORPH)
library(stats)
library(xtable)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
test_data <- fread('../results/LRP/use_data/all_data.csv')
test_data$LRP <- test_data$LRP %>% abs()
##################
##############################################################################################################################
#load ground truth data
protein_data <- read.csv('../data/tcpa_data_051017.csv', check.names = F) %>%
pivot_longer(!c(ID,Cancer_Type), names_to = "proteins", values_to = "expression") %>%
dplyr::select(-Cancer_Type)
for_correlation <- test_data %>% dplyr::select(ID, y, y_pred) %>%
unique() %>%
group_by(ID)
correlation <- ddply(for_correlation, "ID", summarize, "corr" = cor(y, y_pred))
highcorrelation <- correlation %>% filter(corr>0.5)
rcorr(for_correlation$y, for_correlation$y_pred)
case_numbers_old <- test_data %>% group_by(ID) %>% dplyr::summarize("Cancer_Type" = max(Cancer_Type))
summary(as.factor(case_numbers_old$Cancer_Type))
#test_data <- test_data %>% filter(ID %in% highcorrelation$ID)
########################################
#facet wrap of highest values
#SYMMETRIZED
# not grouped by ORGANS!!
number_interactions = 36
################
##################
#symmetrize data
LRP_dir <- test_data %>% dplyr::select(ID, Cancer_Type, predicting_protein, masked_protein, LRP)
LRP_trans <- LRP_dir
colnames(LRP_trans) <- c('ID','Cancer_Type', "masked_protein", "predicting_protein", "tLRP")
sym_LRP <- left_join(LRP_dir, LRP_trans) %>% mutate("LRP_sym" = 0.5*(LRP+tLRP)) %>%
dplyr::arrange(desc(LRP_sym)) %>% filter(predicting_protein >=masked_protein) %>% dplyr::select(-c(LRP, tLRP))
sym_highest_LRP <- sym_LRP %>%
group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym)) %>%
ungroup() %>%
dplyr::arrange(desc(meanLRP)) %>% dplyr::select(predicting_protein, masked_protein, meanLRP)
############################
############################
#compare with reactome
setwd('../data/')
adj_react <- read.delim('int_react_147_060418.csv', header = F)
colnames(adj_react) <- c("masked_protein", as.character(adj_react$V1))
adj_react_matrix <- as.matrix(adj_react[,-1])
rownames(adj_react_matrix) <- as.character(adj_react$masked_protein)
# order names alphanumerically
adj_react_matrix_ordered <- adj_react_matrix[str_order(rownames(adj_react_matrix)), str_order(colnames(adj_react_matrix))]
adj_react_long <- pivot_longer(adj_react,cols=!masked_protein, names_to = "predicting_protein", values_to = "edge")
adj_react_long$predicting_protein <- as.character(adj_react_long$predicting_protein)
adj_react_long$masked_protein <- as.character(adj_react_long$masked_protein)
adj_react_long_sym <- adj_react_long %>% filter((predicting_protein) > (masked_protein))
k = 100
full_frame <- left_join(adj_react_long_sym, sym_highest_LRP, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:k,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrect
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
phyper(ncorrect-1, ncorrectall, nfalseall, k, lower.tail = F, log.p = FALSE)
ncorrect
# filter out phosphorylation variants
highest_names <- tidyr::extract(sym_highest_LRP, predicting_protein, into ="p", "([^_]*).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "([^_]*).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
tidyr::extract(predicting_protein, into ="p", "(..).*", remove = F) %>%
tidyr::extract(masked_protein, into ="m", "(..).*", remove = F) %>%
dplyr::filter(p!=m) %>%
dplyr::select(-c(p,m)) %>%
ungroup %>%
dplyr::select(predicting_protein, masked_protein, meanLRP)
full_frame <- left_join(adj_react_long_sym, highest_names, by =c("masked_protein", "predicting_protein")) %>%
dplyr::arrange(desc(meanLRP)) %>% .[1:36,]
#####
#stat hypergeometric test
library(stats)
ncorrect <- full_frame$edge %>% sum()
ncorrectall <- adj_react_long_sym$edge %>% sum()
nfalseall <- (1-adj_react_long_sym$edge) %>% sum()
k = 36
phyper(ncorrect-1, ncorrectall, nfalseall, 36, lower.tail = F, log.p = FALSE)
ncorrect
h1 <- highest_names[1:36,] %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
sym_LRP <- sym_LRP %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
subset_data <- left_join(h1, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, Cancer_Type) %>%
dplyr::summarize("meanLRP" = median(LRP_sym))
medians_IQR <- left_join(h1, sym_LRP) %>%dplyr::select(-Cancer_Type) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h1, sym_LRP)
myanova <- function(id) {
curr_h <- h1[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ Cancer_Type, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$Cancer_Type = "ACC"
################################
high_names <- subset_data %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset_data, aes(x = Cancer_Type, y =meanLRP, fill = Cancer_Type), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
#scale_y_continuous(expand= expansion(c(0,0.05)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
geom_text(data = description, aes(x = 10, y = 13.0, label = paste('median: ', round(meanLRP, digits=3), 'IQR: ', round(IQR, digits=3)))) +
geom_text(data = description, aes(x = 11, y = 11.5, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2
View(high_names)
View(h1)
View(sym_LRP)
sym_LRP <- sym_LRP %>% left_join(adj_react_long_sym, by = c("masked_protein", "predicting_protein")) %>%
dplyr::mutate("predicting_protein" = ifelse(edge==1, paste(predicting_protein, '*', sep=''), predicting_protein))
subset_data <- left_join(h1, sym_LRP) %>% dplyr::group_by(predicting_protein, masked_protein, Cancer_Type) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), 'IQR' = IQR(LRP_sym))
medians_IQR <- left_join(h1, sym_LRP) %>%dplyr::select(-Cancer_Type) %>% dplyr::group_by(predicting_protein, masked_protein) %>%
dplyr::summarize("meanLRP" = median(LRP_sym), "IQR" = IQR(LRP_sym))
anova_data <- left_join(h1, sym_LRP)
myanova <- function(id) {
curr_h <- h1[id,]
subset <- anova_data %>% filter(predicting_protein == curr_h$predicting_protein, masked_protein == curr_h$masked_protein)
kruskal_result <- kruskal.test(LRP_sym ~ Cancer_Type, data = subset)
c(curr_h$predicting_protein, curr_h$masked_protein, kruskal_result$p.value)
#kruskal_result
}
anovavalues <- sapply(seq(36), myanova)
adj <- p.adjust(anovavalues[3,]) %>% format(digits=2)
adj_values <- rbind(anovavalues, adj) %>% t() %>% data.frame()
colnames(adj_values) <- c("predicting_protein", "masked_protein", "pvalue", "adjpvalue")
description <- left_join(medians_IQR, adj_values)
description$Cancer_Type = "ACC"
################################
high_names <- subset_data %>% ungroup %>% group_by(predicting_protein, masked_protein) %>%
filter(meanLRP >= 0.8*max(meanLRP)) %>% ungroup()
plotobject <- ggplot(subset_data, aes(x = Cancer_Type, y =meanLRP, fill = Cancer_Type), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
#scale_y_continuous(expand= expansion(c(0,0.05)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
geom_text(data = description, aes(x = 10, y = 13.0, label = paste('median: ', round(meanLRP, digits=3), 'IQR: ', round(IQR, digits=3)))) +
geom_text(data = description, aes(x = 11, y = 11.5, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2
plotobject <- ggplot(subset_data, aes(x = Cancer_Type, y =meanLRP, fill = Cancer_Type), color="black") +
#geom_line(aes(group=1))
geom_bar(stat="identity", color="black") #geom_boxplot(outlier.shape = NA)
plotobject
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
#scale_y_continuous(expand= expansion(c(0,0.05)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2
View(high_names)
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
geom_errorbar(data = high_names, aes(ymin=meanLRP-IQR, ymax=meanLRP+IQR), width=.2,
position=position_dodge(.9))
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
geom_errorbar(data = high_names, aes(ymin=meanLRP-IQR, ymax=meanLRP+IQR), width=.2,
position=position_dodge(.9)) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
#scale_y_continuous(expand= expansion(c(0,0.05)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
geom_errorbar(data = subset_data, aes(ymin=meanLRP-IQR, ymax=meanLRP+IQR), width=.2,
position=position_dodge(.9)) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
#scale_y_continuous(expand= expansion(c(0,0.05)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
geom_errorbar(data = subset_data, aes(ymin=meanLRP, ymax=meanLRP+IQR), width=.2,
position=position_dodge(.9)) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
#scale_y_continuous(expand= expansion(c(0,0.05)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
plotobject2
plotobject2 <- plotobject +
geom_text(data = high_names, aes(label = Cancer_Type),hjust = -0.3, angle = 90) +
geom_errorbar(data = subset_data, aes(ymin=meanLRP, ymax=meanLRP+IQR), width=.2,
position=position_dodge(.9)) +
facet_wrap( ~ masked_protein+predicting_protein, nrow = 6) +
geom_text(data = description, aes(x = 10, y = 13.0, label = paste('median: ', round(meanLRP, digits=3), 'IQR: ', round(IQR, digits=3)))) +
geom_text(data = description, aes(x = 11, y = 11.5, label = paste('p: ', adjpvalue))) +
theme_bw()+
theme(axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text  = element_text(size=11),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=18))+
scale_y_continuous(expand= expansion(c(0,0.1)))+
ylab("median LRP")+
xlab("Cancer")+
labs(fill = "Cancer")
png("../plots_statistics/figures/highest_wrap.png",width = 1000, height = 1000)
plotobject2
dev.off()
plotobject2
png("../plots_statistics/figures/highest_wrap.png",width = 1000, height = 1000)
plotobject2
dev.off()
